// This file is automatically generated using github.com/mjibson/esc.

package emma

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/assets/emma-data.yml": {
		local:   "assets/emma-data.yml",
		size:    56763,
		modtime: 1496593367,
		compressed: `
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
9u7/BwAA//9IWpS9u90AAA==
`,
	},

	"/": {
		isDir: true,
		local: "",
	},

	"/assets": {
		isDir: true,
		local: "assets",
	},
}
